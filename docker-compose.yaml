version: "3.8"

networks:
  pkm-network:
    driver: bridge

volumes:
  mongodb_data:
  redis_data:
  esdata:
  esplugs:

services:
  mongodb:
    image: mongo:8
    container_name: mongodb
    ports: ["27017:27017"]
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: [ "CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok' | grep 1 || exit 1" ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
    restart: always
    networks: [pkm-network]

  redis:
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"]
    ports: ["6379:6379"]
    volumes:
      - redis_data:/data
    restart: always
    networks: [pkm-network]

  elasticsearch:
    build:
      context: ./topic/esclient
      dockerfile: Dockerfile
    image: pkm-backend-elasticsearch:latest
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - ES_PLUGINS_INSTALL=analysis-nori
    ports: ["9200:9200"]
    volumes:
      - esdata:/usr/share/elasticsearch/data
      - esplugs:/usr/share/elasticsearch/plugins
    restart: always
    networks: [pkm-network]

  gateway-service:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway-service
    environment:
      - GATEWAY_SERVER_PORT=8000
      - USER_SERVICE_URI=http://user-service:8080
      - GRAPH_SERVICE_URI=http://graph-service:8003
      - NOTE_SERVICE_URI=http://note-service:8002
      - CB_DEFAULT_FAILURE_RATE=50
      - TL_DEFAULT_TIMEOUT=2s
      - JWT_SECRET=fjwoefjowijfowjfoiawjefojaweoffoifjwoeifjowiejfoiw
    ports:
      - "8000:8000"
    depends_on:
      - user-service
      - note-service
      - graph-service
      - topic-service
    networks:
      - pkm-network

  user-service:
    build:
      context: ./user
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - SERVER_PORT=8080
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/userdb
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_CLIENT_REDIRECT_URI=http://localhost:8000/api/v1/users/auth/google/callback
      - JWT_SECRET=fjwoefjowijfowjfoiawjefojaweoffoifjwoeifjowiejfoiw
      - YORKIE_JWT_SECRET=fwoifjowiejfoiawjefowejfoiwejfowiej
      - YORKIE_WEBHOOK_SECRET=fewoifjaowiejfoiawjefoiwejfoaiwejo
      - FRONTEND_REDIRECT_URL=http://localhost:5173
    ports: ["8080:8080"]
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always
    networks: [pkm-network]

  graph-service:
    build:
      context: ./graph
      dockerfile: Dockerfile
    container_name: graph-service
    environment:
      - PORT=8003
      - MONGO_URI=mongodb://mongodb:27017
      - MONGO_DB_NAME=graphdb
      - YORKIE_ADDR=yorkie:8085
      - YORKIE_ADMIN_USERNAME=admin
      - YORKIE_ADMIN_PASSWORD=admin
      - YORKIE_AUTH_WEBHOOK_URL=http://user-service:8080/yorkie/auth
      - TOPIC_SERVICE_URL=http://topic-service:8004
      - NOTE_SERVICE_URL=http://note-service:8002
    ports: ["8003:8003"]
    depends_on:
      mongodb:
        condition: service_healthy
      topic-service:
        condition: service_started
    restart: always
    networks: [pkm-network]

  topic-service:
    build:
      context: ./topic
      dockerfile: Dockerfile
    container_name: topic-service
    environment:
      - SERVER_PORT=8004
      - ELASTICSEARCH_ADDR=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=note
    ports: ["8004:8004"]
    restart: always
    networks: [pkm-network]

  note-service:
    build:
      context: ./note
      dockerfile: Dockerfile
    container_name: note-service
    environment:
      - SERVER_PORT=8002
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=note
      - USER_SERVICE_URL=http://user-service:8080 # User 서비스 내부 주소
      - --admin-username=rclc
      - --admin-password=rclc
    ports: ["8002:8002"]
    restart: always
    networks: [pkm-network]

  yorkie:
    image: yorkieteam/yorkie:latest
    container_name: yorkie
    command: ["server", "--config", "/etc/yorkie.yml"]
    ports:
      - "8085:8085"
    volumes:
      - ./yorkie.yml:/etc/yorkie.yml:ro
    depends_on:
      user-service:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: always
    networks: [ pkm-network ]